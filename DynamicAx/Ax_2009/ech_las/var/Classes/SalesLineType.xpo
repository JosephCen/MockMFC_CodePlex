Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SalesLineType unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SalesLineType
    Id 534
    PROPERTIES
      Name                #SalesLineType
      Extends             #InventType
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #insert
        #// *** ECHINA - Marijn Catthoor ***
        #// *** Customization Code: ECH_WI_01284
        #// *** Customization Date: 29 Aug 2012
        #// *** Customization Type: Modified
        #// *** Description: Call new method to set the reservation status
        #
        # // *** ECHINA - Anthony Christiaens ***
        #// *** Customization Code: ECH_WI_000804
        #// *** Customization Date: 30 July 2012
        #// *** Customization Type: modified
        #// *** Description: shadow class update call
        #
        #// *** ECHINA - Anthony Christiaens ***
        #// *** Customization Code: ECH_E_003
        #// *** Customization Date: 10 May 2012
        #// *** Customization Type: modified
        #// *** Description:
        #
        #public void  insert(boolean     dropInvent      = false,
        #                    boolean     findMarkup      = true,
        #                    Common      childBuffer     = null,
        #                    boolean     _skipCreditLimitCheck = false)
        #{
        #    #OCCRetryCount
        #    InventUpd_Estimated     estimated;
        #    NumberSeq               numberSeq;
        #    InterCompanySkipUpdate  interCompanySkipUpdate = salesLine.SkipUpdate;
        #    ;
        #    try
        #    {
        #        ttsbegin;
        #
        #        this.setReverseCharge_UK();
        #
        #        salesTable = salesLine.salesTable(update);
        #
        #        if (salesTable.isInterCompanyOrder() && salesLine.inventTable().interCompanyBlockedSales())
        #            throw error(strfmt("@SYS74812", salesLine.ItemId));
        #
        #        if (salesLine.SkipUpdate == InterCompanySkipUpdate::No
        #        &&  salesTable.interCompanyAllowIndirectCreationOrig())
        #            throw error(salesTable.interCompanyAllowIndirectCreationOrig());
        #
        #        if (salesLine.creditNoteLine())
        #            salesLine.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
        #
        #        numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventTransId());
        #        salesLine.InventTransId = numberSeq.num();
        #
        #        if (!salesLine.CustAccount || !salesLine.CustGroup)
        #        {
        #            salesLine.CustAccount  = salesTable.CustAccount;
        #            salesLine.CustGroup    = salesTable.CustGroup;
        #        }
        #
        #        salesLine.TaxAutogenerated = NoYes::Yes;
        #
        #        salesLine.setSalesStatus();
        #
        #        if (salesLine.SkipUpdate != InterCompanySkipUpdate::InterCompany
        #        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both)
        #            this.interCompanyMirror();
        #
        #        this.updateSalesTable();
        #
        #        this.setBlanketOrderRef(true);
        #
        #        if (salesLine.SalesStatus != salesTable.SalesStatus)
        #        {
        #            salesTable.SalesStatus = salesLine.SalesStatus;
        #            salesTable.update();
        #        }
        #
        #        if (!dropInvent)
        #        {
        #            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(salesLine, InventMovSubType::None, childBuffer));
        #            estimated.updateNow();
        #        }
        #
        #        salesLine.ConfirmedDlv = salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested;
        #
        #        salesLine.doInsert();
        #
        #        salesLine.setThirdPartyAddressFromSalesTable(salesTable);
        #
        #        if (salesLine.SkipUpdate != InterCompanySkipUpdate::InterCompany
        #        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both
        #        &&  salesTable.InterCompanyAutoCreateOrders && salesTable.existInterCompanySales())
        #            TradeInterCompany::autoCreateOrder(salesLine);
        #
        #        if (this.orderEntryStatistics())
        #        {
        #            if (salesLine.SalesType == SalesType::Sales || salesLine.SalesType == SalesType::ReturnItem)
        #            {
        #                SalesOrderEntryStatistics::createOrderEntry(salesLine);
        #            }
        #        }
        #
        #        if (estimated)
        #            estimated.updateReservation();
        #
        #        if (findMarkup)
        #            salesLine.createMarkupTrans(salesTable);
        #
        #        if (salesLine.SkipUpdate != InterCompanySkipUpdate::InterCompany
        #        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both
        #        &&  salesTable.isInterCompanyOrder())
        #            this.interCompanyMarkupMirror();
        #
        #        // creditlimitcheck is done here - the first time, so we are able to lookup misc. charges with recid from salesLine
        #        if (!_skipCreditLimitCheck && salesLine.RecId)
        #        {
        #            this.checkAgainstCreditLimit();
        #        }
        #
        #        salesLine.SkipUpdate = InterCompanySkipUpdate::No;
        #
        #
        #        salesLine.doUpdate();
        #
        #// CS - ECH_WI_01284 - Marijn Catthoor - 29 Aug 2012
        #
        #        echSalesOrder::setSaleslineReservationStatus(salesLine);
        #
        #// CE - ECH_WI_01284 - Marijn Catthoor - 29 Aug 2012
        #
        #        // <GIN>
        #        if (salesTable.CustomsExportOrder_IN
        #            && salesLine.SalesQty >= 0
        #            && TaxParameters::find().EximIncentiveSchemes_IN)
        #        {
        #            EximSalesLine_IN::insertFromSalesLine(salesLine.RecId, salesLine.ItemId);
        #        }
        #        // </GIN>
        #
        #        // <GBR>
        #        if (BrazilParameters::isEnabled())
        #        {
        #            this.deleteInventoryMovement_BR(salesLine);
        #        }
        #        // </GBR>
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Deadlock)
        #    {
        #        retry;
        #    }
        #    catch (Exception::UpdateConflict)
        #    {
        #        if (appl.ttsLevel() == 0)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                throw Exception::UpdateConflictNotRecovered;
        #            }
        #            else
        #            {
        #                retry;
        #            }
        #        }
        #        else
        #        {
        #            throw Exception::UpdateConflict;
        #        }
        #    }
        #    catch (Exception::Error)
        #    {
        #        ttsabort;
        #        throw error("@SYS93835");
        #    }
        #
        #    if (interCompanySkipUpdate   == InterCompanySkipUpdate::No)
        #    {
        #        this.interCompanyCalcDiscInternal();
        #        this.interCompanyCalcDisc();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #update
        #// *** ECHINA - Marijn Catthoor ***
        #// *** Customization Code: ECH_WI_01284
        #// *** Customization Date: 30 Aug 2012
        #// *** Customization Type: Modified
        #// *** Description: Call new method to set the reservation status
        #
        #// *** ECHINA - Anthony Christiaens ***
        #// *** Customization Code: ECH_E_003
        #// *** Customization Date: 10 May 2012
        #// *** Customization Type: modified
        #// *** Description:
        #
        #public void  update(boolean  _dropInvent              = false,
        #                    Common   _childBuffer             = null,
        #                    boolean  _forceInterCompanyMirror = false)
        #{
        #    #OCCRetryCount
        #    InventUpd_Estimated     estimated;
        #    CostAmount              orgCostAmount;
        #    boolean                 salesOrderEntryStats;
        #    InterCompanySkipUpdate  interCompanySkipUpdate = salesLine.SkipUpdate;
        #
        #    // <GBR>
        #    boolean isBrazilParameterEnabled = BrazilParameters::isEnabled();
        #    // </GBR>
        #    ;
        #    try
        #    {
        #        ttsbegin;
        #
        #        this.setReverseCharge_UK();
        #
        #        salesOrderEntryStats = this.orderEntryStatistics();
        #
        #        if (salesOrderEntryStats)
        #        {
        #            orgCostAmount = salesLine_Orig.calcCostAmount(salesLine_Orig.RemainSalesPhysical);
        #        }
        #
        #        salesLine.ConfirmedDlv = salesLine.ShippingDateConfirmed ? salesLine.ShippingDateConfirmed : salesLine.ShippingDateRequested;
        #
        #        if (salesLine.creditNoteLine())
        #            salesLine.TransactionCode = IntrastatParameters::find().DefaultCreditNote;
        #
        #        salesLine.setSalesStatus();
        #
        #        this.setBlanketOrderRef();
        #
        #        salesLine.updateBlanketOrder(salesLine_Orig.RemainSalesPhysical - salesLine.RemainSalesPhysical);
        #
        #        if (salesLine.SkipUpdate   != InterCompanySkipUpdate::Internal
        #        &&  salesLine.SkipUpdate   != InterCompanySkipUpdate::Both
        #        &&  salesLine.SalesType    == SalesType::ReturnItem
        #        &&  salesLine.SalesQty     != salesLine.ExpectedRetQty
        #        && (salesLine.DeliveryType == TradeLineDlvType::DropShip || PurchTable::find(salesLine.InventRefId).InterCompanyOrder))
        #        {
        #            salesLine.SalesQty            = salesLine.ExpectedRetQty;
        #            salesLine.salesQtyModified();
        #            salesLine.LineAmount          = salesLine.returnLineAmount();
        #        }
        #
        #        if (_forceInterCompanyMirror
        #        || (salesLine.SkipUpdate != InterCompanySkipUpdate::InterCompany
        #        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both))
        #            this.interCompanyMirror(_forceInterCompanyMirror);
        #
        #        this.updateSalesTable();
        #
        #        if (!_dropInvent
        #            // <GBR>
        #            && (!isBrazilParameterEnabled || !salesLine.WithoutInventory)
        #            // </GBR>
        #            )
        #        {
        #                estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(salesLine, InventMovSubType::None, _childBuffer));
        #                estimated.updateNow();
        #
        #// CS - ECH_WI_01284 - Marijn Catthoor - 29 Aug 2012
        #                // update the sales line reservation status after running the auto reserve logic
        #                echSalesOrder::setSaleslineReservationStatus(salesLine);
        #
        #// CE - ECH_WI_01284 - Marijn Catthoor - 29 Aug 2012
        #
        #
        #        }
        #        // <GBR>
        #        else if (isBrazilParameterEnabled)
        #        {
        #            if (salesLine.orig())
        #            {
        #                if (abs(salesLine.QtyOrdered)  <  abs(salesLine.orig().QtyOrdered)
        #                    && -salesLine.QtyOrdered * -salesLine.orig().QtyOrdered >= 0)
        #                {
        #                    if ((-salesLine.orig().RemainSalesPhysical == 0 && -salesLine.orig().RemainSalesFinancial == 0)
        #                        || (-salesLine.RemainSalesPhysical * -salesLine.orig().RemainSalesPhysical   < 0
        #                            || -salesLine.RemainSalesPhysical * -salesLine.orig().RemainSalesFinancial  < 0))
        #                    {
        #                        warning("@SYS25508");
        #                        throw error("@SYS18447");
        #                    }
        #                }
        #
        #                if (-salesLine.QtyOrdered * -salesLine.orig().QtyOrdered < 0)
        #                {
        #                    if (-salesLine.RemainSalesPhysical  !=  salesLine.SalesQty
        #                        || -salesLine.RemainSalesFinancial != 0)
        #                    {
        #                        warning("@SYS25506");
        #                        throw error("@SYS18447");
        #                    }
        #                }
        #            }
        #        }
        #
        #
        #        if (isBrazilParameterEnabled)
        #        {
        #            if (salesLine.ReturnDispositionCodeId)
        #            {
        #                salesLine.doUpdate();
        #            }
        #
        #            if (salesLine.salesTable().SalesStatus != SalesStatus::Invoiced && salesLine.RecId)
        #            {
        #                TaxFiscalInfo_BR::updateFromTaxIntersection(salesLine);
        #            }
        #        }
        #        // </GBR>
        #
        #        if (salesLine.SkipUpdate != InterCompanySkipUpdate::Internal
        #        &&  salesLine.SkipUpdate != InterCompanySkipUpdate::Both
        #        && (salesLine.DeliveryType == TradeLineDlvType::DropShip || PurchTable::find(salesLine.InventRefId).InterCompanyOrder))
        #            this.syncPurchLineSave(salesLine);
        #
        #        if (salesLine.SkipUpdate     != InterCompanySkipUpdate::InterCompany
        #        &&  salesLine.SkipUpdate     != InterCompanySkipUpdate::Both
        #        &&  salesLine.QtyOrdered     == 0
        #        &&  salesLine.ExpectedRetQty == 0
        #        && (salesLine.DeliveryType   == TradeLineDlvType::DropShip || PurchTable::find(salesLine_Orig.InventRefId).InterCompanyOrder))
        #            this.interCompanyDropPurchLine(salesLine,salesLine_Orig);
        #
        #        salesLine.SkipUpdate = InterCompanySkipUpdate::No;
        #
        #        salesLine.doUpdate();
        #
        #        if (salesOrderEntryStats)
        #        {
        #            if (salesLine.SalesType == SalesType::Sales || salesLine.SalesType == SalesType::ReturnItem)
        #            {
        #                if (salesLine_Orig.SalesType == SalesType::Sales || salesLine_Orig.SalesType == SalesType::ReturnItem)
        #                {
        #                    if (salesLine.SalesStatus == SalesStatus::Canceled)
        #                    {
        #                        SalesOrderEntryStatistics::deleteOrderEntry(salesLine_Orig, orgCostAmount);
        #                    }
        #                    else
        #                    {
        #                        SalesOrderEntryStatistics::updateOrderEntry(salesLine, salesLine_Orig, orgCostAmount);
        #                    }
        #                }
        #                else
        #                {
        #                    SalesOrderEntryStatistics::createOrderEntry(salesLine);
        #                }
        #            }
        #            else
        #            {
        #                if (salesLine_Orig.SalesType == SalesType::Sales || salesLine_Orig.SalesType == SalesType::ReturnItem)
        #                {
        #                    SalesOrderEntryStatistics::deleteOrderEntry(salesLine_Orig, orgCostAmount);
        #                }
        #            }
        #        }
        #
        #
        #        if (estimated)
        #            estimated.updateReservation();
        #
        #        if (salesLine.SalesStatus != salesLine_Orig.SalesStatus)
        #            salesTable.updateBackStatus();
        #
        #        // CS - ECH_E_003 - Abdessamad Almask - 20 Apr 2012
        #        if (isConfigurationKeyEnabled(configurationKeyNum(echProcesses)))
        #        {
        #            if(salesTable.SalesType == SalesType::ReturnItem && salesTable.ReturnStatus == ReturnStatusHeader::Created)
        #                echUpdateAggStatus::updateStatus(salesTable.SalesId, ECHAggStatus::ProductsReceived);
        #        }
        #        // CE - ECH_E_003 - Abdessamad Almask - 20 Apr 2012
        #
        #        ttscommit;
        #    }
        #    catch (Exception::Deadlock)
        #    {
        #        retry;
        #    }
        #    catch (Exception::UpdateConflict)
        #    {
        #        if (appl.ttsLevel() == 0)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                throw Exception::UpdateConflictNotRecovered;
        #            }
        #            else
        #            {
        #                retry;
        #            }
        #        }
        #        else
        #        {
        #            throw Exception::UpdateConflict;
        #        }
        #    }
        #    catch (Exception::Error)
        #    {
        #        ttsabort;
        #        throw error("@SYS93835");
        #    }
        #
        #    if (interCompanySkipUpdate   == InterCompanySkipUpdate::No
        #    && (salesLine_Orig.SalesQty  != salesLine.SalesQty
        #    ||  salesLine_Orig.SalesUnit != salesLine.SalesUnit))
        #    {
        #        this.interCompanyCalcDiscInternal();
        #        this.interCompanyCalcDisc();
        #    }
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END

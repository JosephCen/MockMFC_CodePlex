Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics AX Job: echConfigureAIFEndPointActions unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #echConfigureAIFEndPointActions
    #// *** ECHINA - Anthony Christiaens ***
    #// *** Customization Code: AutoGeneratedCode
    #// *** Customization Date: 11 Jun 2012
    #// *** Customization Type: created
    #// *** Description: script to configure actions and pipeline components on an AIF endpoint
    #
    #static void echConfigureAIFEndPointActions(Args _args)
    #{
    #    AifEndpointId                   endPointId =    "DMO_BTS";
    #    container                       aifActions =   ["CustCustomerService.create",
    #                                                    "CustCustomerService.find",
    #                                                    "CustCustomerService.read",
    #                                                    "CustCustomerService.update",
    #                                                    "echAxInventStockQueueService.create",
    #                                                    "EchInventOnHandService.find",
    #                                                    "EchInventOnHandService.read",
    #                                                    "EchPickingListRegService.create",
    #                                                    "EchPickingListRegService.find",
    #                                                    "EchPickingListRegService.update",
    #                                                    "echProdCatalogService.find",
    #                                                    "InventPickingListService.read",
    #                                                    "ReturnReturnOrderOutService.find",
    #                                                    "ReturnReturnOrderOutService.read",
    #                                                    "SalesSalesOrderService.create",
    #                                                    "SalesSalesOrderService.find",
    #                                                    "SalesSalesOrderService.read",
    #                                                    "SalesSalesOrderService.update",
    #                                                    "SalesSalesPackingSlipService.create",
    #                                                    "echSalesOrderDeliveredService.create",
    #                                                    "echExternalSkuTableService.create",
    #                                                    "echReturnOrderArrivalService.create"
    #                                                   ];
    #
    #    str                             xsltId = "R_TO_CU";
    #    Map                             mapInPipelineComps  = new Map(Types::String, Types::Int64);
    #    AifEndpointActionPolicy         aifEndpointActionPolicy;
    #    AifPipeline                     aifPipeline;
    #    AifPipelineComponent            aifPipelineComponent;
    #    echCUPipelineParameters         echCUPipelineParameters;
    #    AifDocumentClassId              documentClassId;
    #    AifDataPolicy                   aifDataPolicy;
    #    AxdWizardParameters             params;
    #    AifAction                       aifAction;
    #    AifService                      aifService;
    #    ClassName                       axdClassName;
    #    int                             idx;
    #    axSalesTable                    axSalesTable;
    #    DictClass                       dictClass;
    #    AxdBase                         axdBase;
    #    ;
    #
    #    if (!AifEndpoint::find(endPointId))
    #        throw error(strfmt("endpoint id %1 does not exist", endpointId));
    #
    #    if (!(select recId from AifXsltRepository where AifXsltRepository.XsltId).RecId)
    #        throw error(strfmt("Xslt %1 does not exist", xsltId));
    #
    #    // add to be created pipeline components to map (actionIf + class id)
    #    mapInPipelineComps.insert("CustCustomerService.create", 30016);
    #    mapInPipelineComps.insert("EchPickingListRegService.create", 30016);
    #    mapInPipelineComps.insert("SalesSalesOrderService.create", 30016);
    #
    #    // loop defined actions
    #    for (idx = 1; idx <= conlen(aifActions); idx++)
    #    {
    #        aifAction  = AifAction::find(conpeek(aifActions, idx));
    #        aifService = AifService::find(aifAction.ServiceName);
    #
    #        // enable service
    #        if (!aifService.Enabled)
    #        {
    #            ttsbegin;
    #            aifService.selectForUpdate(true);
    #            aifService.Enabled = NoYes::Yes;
    #            aifService.doUpdate();
    #            ttscommit;
    #        }
    #
    #        // enable action
    #        if (!aifAction.ActionEnabled)
    #        {
    #            ttsbegin;
    #            aifAction.selectForUpdate(true);
    #            aifAction.ActionEnabled = NoYes::Yes;
    #            aifAction.update();
    #            ttscommit;
    #        }
    #
    #        // if action is valid and not yet exists on endpoint
    #        if (aifAction)
    #        {
    #            aifEndpointActionPolicy = AifEndpointActionPolicy::find(endPointId, aifAction.ActionId);
    #
    #            if(!aifEndpointActionPolicy)
    #            {
    #                aifEndpointActionPolicy.clear();
    #                aifEndpointActionPolicy.EndpointId      = endPointId;
    #
    #                aifEndpointActionPolicy.ActionId        = aifAction.ActionId;
    #                aifEndpointActionPolicy.Status          = AifPolicyStatus::Enabled;
    #                aifEndpointActionPolicy.LoggingMode     = AifLoggingMode::LogAll;
    #
    #                // insert action on endpoint
    #                if (aifEndpointActionPolicy.validateWrite())
    #                    aifEndpointActionPolicy.insert();
    #            }
    #
    #            // if service parameters found
    #            params = AifServiceClassGenerator::getServiceParameters(classId2Name(aifAction.ClassId));
    #            if ((params != null) && (params.parmAifEntityClassName() != ''))
    #            {
    #                // get document class id of the service class
    #                documentClassId = className2Id(params.parmAifEntityClassName());
    #                // Add the schemas for the parameters of the specified action
    #                AifEndpointActionParameterSchema::addParameterSchemas(endpointId, aifAction.ActionId);
    #                // Add dataPolicies
    #                AifDataPolicy::synchronizeSchema(endpointId, aifAction.ActionId, documentClassId);
    #                // Enable all fields
    #                update_recordset aifDataPolicy
    #                    setting
    #                        IsEnabled = NoYes::Yes
    #                    where
    #                        aifDataPolicy.EndpointId == endPointId &&
    #                        aifDataPolicy.ActionId   == aifAction.ActionId;
    #
    #                // Check if there is a pipeline component for this action
    #                if (mapInPipelineComps.exists(aifAction.ActionId))
    #                {
    #                    // check if the class id of the component is valid
    #                    if (AifPipelineComponent::checkClassId(mapInPipelineComps.lookup(aifAction.ActionId)))
    #                    {
    #                        // generate the pipeline
    #                        aifPipeline = AifPipeline::generatePipelineRecord(endpointId, aifAction.ActionId, AifMessageDirection::Inbound);
    #                        // add the component
    #                        aifPipelineComponent.clear();
    #                        aifPipelineComponent.PipelineId  = aifPipeline.PipelineId;
    #                        aifPipelineComponent.ClassId     = mapInPipelineComps.lookup(aifAction.ActionId);
    #                        aifPipelineComponent.Sequence    = 2000000000;
    #                        if (aifPipelineComponent.validateWrite())
    #                            aifPipelineComponent.insert();
    #
    #                        // update action on endpoint with inbound pipeline id
    #                        ttsbegin;
    #                        aifEndpointActionPolicy.selectForUpdate(true);
    #                        aifEndpointActionPolicy.InboundPipelineId = aifPipelineComponent.PipelineId;
    #                        aifEndpointActionPolicy.update();
    #                        ttscommit;
    #
    #                        // Get Axdclass name
    #                        axdClassName = AifSchemaStore::find(AifDocumentSchemaTable::find(documentClassId).SchemaRecId).SchemaRootElementType;
    #
    #                        // if the piple is created and the axdclass is found => configure pipeline
    #                        if (aifPipelineComponent.RecId && axdClassName)
    #                        {
    #                            // create dict class object
    #                            dictClass = new DictClass(classname2id(axdClassName));
    #                            if (dictClass)
    #                            {
    #                                // make object of axdClass
    #                                axdBase = dictClass.makeObject();
    #                                // configure pipeline component
    #                                echCUPipelineParameters.clear();
    #                                echCUPipelineParameters.AifPipelineComponentRecId   = aifPipelineComponent.RecId;
    #                                echCUPipelineParameters.axdClassId                  = classname2id(axdClassName);
    #                                echCUPipelineParameters.xsltId                      = xsltId;
    #                                echCUPipelineParameters.entityKeyTableId            = dictClass.callObject("getTableIdForEntityKey", axdBase);
    #                                if (echCUPipelineParameters.validateWrite())
    #                                    echCUPipelineParameters.insert();
    #                            }
    #                            else
    #                                error(strfmt("an error occurred while creating the component for endpoint id %1 action id %2", endpointId, aifAction.ActionId));
    #                        }
    #                        else
    #                            error(strfmt("an error occurred while creating the component for endpoint id %1 action id %2", endpointId, aifAction.ActionId));
    #                    }
    #                }
    #            }
    #        }
    #    }
    #}
  ENDSOURCE

***Element: END

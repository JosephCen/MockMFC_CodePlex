<#@ template language="C#" inherits="BaseSubTemplate" #>
        #region Constructor

        /// <summary>
        /// Verify <see cref="<#= GetTargetTypeName() #>"/> is registered as <see cref="<#= GetTargetInterfaceName() #>"/>.
        /// </summary>
        [TestMethod, TestCategory(TestCategory.UnitTest)]
        public void <#= GetTargetTypeName() #>_ServiceLocator_the_class_is_registered_as_<#= GetTargetInterfaceName() #>()
        {
            // Arrange
            using (var serviceLocator = new ServiceLocator())
            {
                // Act
                var result = serviceLocator
                                  .Is(typeof(<#= GetTargetTypeName() #>))
                                  .RegisteredAs<<#= GetTargetInterfaceName() #>>();

                // Assert
                Assert.IsTrue(result);
            }
        }

        /// <summary>
        /// Verify instance of <see cref="<#= GetTargetTypeName() #>"/> will be created successful by <see cref="ServiceLocator"/>.
        /// </summary>
        [TestMethod, TestCategory(TestCategory.UnitTest)]
        public void <#= GetTargetTypeName() #>_ServiceLocator_returns_instance()
        {
            // Arrange
            using (var serviceLocator = new ServiceLocator())
            {
                // Act
                var <#= GetInstanceVariableName() #> = serviceLocator.GetInstance<<#= GetTargetInterfaceName() #>>();

                // Assert
                Assert.IsNotNull(<#= GetInstanceVariableName() #>);
                Assert.IsInstanceOfType(<#= GetInstanceVariableName() #>, typeof(<#= GetTargetTypeName() #>));
            }
        }

        #endregion

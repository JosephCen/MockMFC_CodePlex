<#@ template language="C#" inherits="BaseSubTemplate" #>
<#@ import namespace="CLQCodeGen.CodeTemplates.DataObjects" #>
<#
    const int inFuncMockThreshold = 3;
    var mockFieldAndTypeList = GetMockFieldAndTypeList();
#>
        #region Test Initialise

        [TestInitialize]
        public void TestInitialise()
        {
<#
    foreach (var fieldAndType in mockFieldAndTypeList)
    {
        WriteLine($"            {fieldAndType.Name} = new Mock<{fieldAndType.TypeName}>();");
    }
#>

            <#= GetTargetFieldName() #> = new <#= GetTargetTypeName() #>(<#
    if (mockFieldAndTypeList.Count > 0)
        WriteLine("");

    for (int i = 0; i < mockFieldAndTypeList.Count; ++i)
    {
	    var fieldAndType = mockFieldAndTypeList[i];
	    var space = "                                    ";

        Write($"{space}{fieldAndType.Name}.Object");
        if (i + 1 < mockFieldAndTypeList.Count)
        {
		    WriteLine(",");
        }
    }
    WriteLine(");");

    foreach (var fieldAndType in mockFieldAndTypeList)
    {
        if (mockFieldAndTypeList.Count > inFuncMockThreshold)
        {
#>

            Initialise(<#= fieldAndType.Name #>);
<#            
        }
        else
        {
            SetupMock(fieldAndType);
        }
    }
#>
        }

<#
    if (mockFieldAndTypeList.Count > inFuncMockThreshold)
    {
        foreach (var fieldAndType in mockFieldAndTypeList)
        {
            var curFieldAndType = fieldAndType.Clone();

            curFieldAndType.Name = ToInFuncName(curFieldAndType.Name);
#>
        private void Initialise(Mock<<#= curFieldAndType.TypeName #>> <#= curFieldAndType.Name #>)
        {
<# 
        SetupMock(curFieldAndType);
#>
        }

<#
        }
    }
#>
        #endregion
<#+
    private void SetupMock(FieldAndType fieldAndType)
    {
        if (fieldAndType.TypeName.Contains("AspectLoader"))
        {
            WriteSubTemplate(typeof(SetupAspectLoaderMock), fieldAndType);
        }
    }
#>